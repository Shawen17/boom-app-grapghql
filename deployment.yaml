apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: frontend:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
          env:
            - name: CHOKIDAR_USEPOLLING
              value: "true"
            - name: BACKEND_HOST
              value: "backend"
            - name: REACT_APP_MEDIA_URL
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: REACT_APP_MEDIA_URL
          volumeMounts:
            - name: frontend-volume
              mountPath: /frontend
      volumes:
        - name: frontend-volume
          hostPath:
            path: /frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: backend:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 9000
          env:
            - name: CHOKIDAR_USEPOLLING
              value: "true"
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
            - name: MYSQL_HOST
              value: "mariadb"
            - name: MYSQL_PORT
              value: "3306"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: DB_USER
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: PASSWORD
            - name: CLUSTERNAME
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: CLUSTERNAME
            - name: TOKEN_SECRET
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: TOKEN_SECRET
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: NODE_ENV
          volumeMounts:
            - name: backend-volume
              mountPath: /backend
      volumes:
        - name: backend-volume
          hostPath:
            path: /backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      containers:
        - name: mariadb
          image: mariadb:10.2
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_DATABASE
              value: "marz"
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
          volumeMounts:
            - name: mariadb-data
              mountPath: /var/lib/mysql
            - name: mariadb-initdb
              mountPath: /docker-entrypoint-initdb.d/marzdata.sql
              subPath: marzdata.sql
      volumes:
        - name: mariadb-data
          persistentVolumeClaim:
            claimName: mariadb-pvc
        - name: mariadb-initdb
          hostPath:
            path: /db/marzdata.sql # Replace with the absolute path to marzdata.sql on your host
            type: File
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metrics-server
  template:
    metadata:
      labels:
        app: metrics-server
    spec:
      containers:
        - name: metrics-server
          image: metrics-server:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 3002
          volumeMounts:
            - name: metrics-volume
              mountPath: /metrics
      volumes:
        - name: metrics-volume
          hostPath:
            path: /metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysqld-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysqld-exporter
  template:
    metadata:
      labels:
        app: mysqld-exporter
    spec:
      containers:
        - name: mysqld-exporter
          image: quay.io/prometheus/mysqld-exporter
          ports:
            - containerPort: 9104
          env:
            - name: DATA_SOURCE_NAME
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
          volumeMounts:
            - name: mysqld-exporter-config
              mountPath: /etc/mysql/.my.cnf
              subPath: .my.cnf
      volumes:
        - name: mysqld-exporter-config
          configMap:
            name: mysqld-exporter-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/prometheus.yaml
              subPath: prometheus.yaml
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana
          ports:
            - containerPort: 3001
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: GF_SECURITY_ADMIN_PASSWORD
            - name: GF_SERVER_HTTP_PORT
              value: "3001"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
